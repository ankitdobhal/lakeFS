openapi: 3.0.1
info:
  title: lakeFS API
  description: lakeFS HTTP API
  version: 0.1.0
servers:
- url: /api/v1
security:
- jwt_token: []
- basic_auth: []
paths:
  /setup_lakefs:
    post:
      tags:
      - setup
      summary: setup lakeFS and create the first user
      operationId: setupLakeFS
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/setup'
        required: false
      responses:
        200:
          description: user created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentials_with_secret'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        409:
          description: setup was already called
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: user
  /user:
    get:
      tags:
      - auth
      summary: get current user
      operationId: getCurrentUser
      responses:
        200:
          description: user
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/user'
  /auth/users:
    get:
      tags:
      - auth
      summary: list users
      operationId: listUsers
      parameters:
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: user list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - auth
      summary: create user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user_creation'
        required: false
      responses:
        201:
          description: user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: user
  /auth/users/{userId}:
    get:
      tags:
      - auth
      summary: get user
      operationId: getUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - auth
      summary: delete user
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: user deleted successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/groups:
    get:
      tags:
      - auth
      summary: list groups
      operationId: listGroups
      parameters:
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: group list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/group'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - auth
      summary: create group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/group_creation'
        required: false
      responses:
        201:
          description: group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: group
  /auth/groups/{groupId}:
    get:
      tags:
      - auth
      summary: get group
      operationId: getGroup
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/group'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - auth
      summary: delete group
      operationId: deleteGroup
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: group deleted successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/policies:
    get:
      tags:
      - auth
      summary: list policies
      operationId: listPolicies
      parameters:
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: policy list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/policy'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - auth
      summary: create policy
      operationId: createPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/policy'
        required: false
      responses:
        201:
          description: policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/policy'
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: policy
  /auth/policies/{policyId}:
    get:
      tags:
      - auth
      summary: get policy
      operationId: getPolicy
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/policy'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: policy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
      - auth
      summary: update policy
      operationId: updatePolicy
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/policy'
        required: false
      responses:
        200:
          description: policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/policy'
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: policy
    delete:
      tags:
      - auth
      summary: delete policy
      operationId: deletePolicy
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: policy deleted successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: policy not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/groups/{groupId}/members:
    get:
      tags:
      - auth
      summary: list group members
      operationId: listGroupMembers
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: user list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/groups/{groupId}/members/{userId}:
    put:
      tags:
      - auth
      summary: add group membership
      operationId: addGroupMembership
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: membership added successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - auth
      summary: delete group membership
      operationId: deleteGroupMembership
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: membership deleted successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: membership not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/users/{userId}/credentials:
    get:
      tags:
      - auth
      summary: list user credentials
      operationId: listUserCredentials
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: credential list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/credentials'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - auth
      summary: create credentials
      operationId: createCredentials
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentials_with_secret'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/users/{userId}/credentials/{accessKeyId}:
    get:
      tags:
      - auth
      summary: get credentials
      operationId: getCredentials
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: accessKeyId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credentials'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: credentials not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - auth
      summary: delete credentials
      operationId: deleteCredentials
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: accessKeyId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: credentials deleted successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: credentials not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/users/{userId}/groups:
    get:
      tags:
      - auth
      summary: list user groups
      operationId: listUserGroups
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: group list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/group'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/users/{userId}/policies:
    get:
      tags:
      - auth
      summary: list user policies
      operationId: listUserPolicies
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      - name: effective
        in: query
        description: will return all distinct policies attached to the user or any
          of its groups
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: policy list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/policy'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/users/{userId}/policies/{policyId}:
    put:
      tags:
      - auth
      summary: attach policy to user
      operationId: attachPolicyToUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: policy attached successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - auth
      summary: detach policy from user
      operationId: detachPolicyFromUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: policy detached successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: policy attachment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/groups/{groupId}/policies:
    get:
      tags:
      - auth
      summary: list group policies
      operationId: listGroupPolicies
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: policy list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/policy'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /auth/groups/{groupId}/policies/{policyId}:
    put:
      tags:
      - auth
      summary: attach policy to group
      operationId: attachPolicyToGroup
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: policy attached successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - auth
      summary: detach policy from group
      operationId: detachPolicyFromGroup
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: policy detached successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: policy attachment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories:
    get:
      tags:
      - repositories
      summary: list repositories
      operationId: listRepositories
      parameters:
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: repository list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/repository'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - repositories
      summary: create repository
      operationId: createRepository
      parameters:
      - name: bare
        in: query
        description: If true, create a bare repository with no initial commit and
          branch
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/repository_creation'
        required: false
      responses:
        201:
          description: repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repository'
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: repository
  /repositories/{repository}:
    get:
      tags:
      - repositories
      summary: get repository
      operationId: getRepository
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: repository
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/repository'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - repositories
      summary: delete repository
      operationId: deleteRepository
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: repository deleted successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/refs/dump:
    put:
      tags:
      - refs
      summary: Dump repository refs (tags, commits, branches) to object store
      operationId: dump
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      responses:
        201:
          description: refs dump
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/refs_dump'
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/refs/restore:
    put:
      tags:
      - refs
      summary: Restore repository refs (tags, commits, branches) from object store
      operationId: restore
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/refs_dump'
        required: false
      responses:
        200:
          description: refs successfully loaded
          content: {}
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: manifest
  /repositories/{repository}/tags:
    get:
      tags:
      - tags
      summary: list tags
      operationId: listTags
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: tag list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ref'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - tags
      summary: create tag
      operationId: createTag
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tag_creation'
        required: false
      responses:
        201:
          description: tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ref'
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: tag
  /repositories/{repository}/tags/{tag}:
    get:
      tags:
      - tags
      summary: get tag
      operationId: getTag
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: tag
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ref'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - tags
      summary: delete tag
      operationId: deleteTag
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: tag
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: tag deleted successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/branches:
    get:
      tags:
      - branches
      summary: list branches
      operationId: listBranches
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: branch list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/ref'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - branches
      summary: create branch
      operationId: createBranch
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/branch_creation'
        required: false
      responses:
        201:
          description: reference
          content:
            application/json:
              schema:
                type: string
        400:
          description: validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: branch
  /repositories/{repository}/branches/{branch}/commits:
    get:
      tags:
      - commits
      summary: get commit log for branch
      operationId: getBranchCommitLog
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: commit log
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/commit'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    post:
      tags:
      - commits
      summary: create commit
      operationId: commit
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commit_creation'
        required: false
      responses:
        201:
          description: commit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commit'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        412:
          description: precondition failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: commit
  /repositories/{repository}/branches/{branch}:
    get:
      tags:
      - branches
      summary: get branch
      operationId: getBranch
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: branch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ref'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    put:
      tags:
      - branches
      summary: reset branch
      operationId: resetBranch
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: reset parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reset_creation'
        required: false
      responses:
        204:
          description: reset successful
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: reset
    delete:
      tags:
      - branches
      summary: delete branch
      operationId: deleteBranch
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: branch deleted successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/branches/{branch}/revert:
    post:
      tags:
      - branches
      summary: revert
      operationId: revert
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ref:
                  type: string
                  description: the commit to revert, given by a ref
                parent_number:
                  type: integer
                  description: when reverting a merge commit, the parent number (starting
                    from 1) relative to which to perform the revert.
        required: false
      responses:
        204:
          description: revert successful
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: revert
  /repositories/{repository}/refs/{sourceRef}/merge/{destinationBranch}:
    post:
      tags:
      - refs
      summary: merge references
      operationId: mergeIntoBranch
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: sourceRef
        in: path
        description: source ref
        required: true
        schema:
          type: string
      - name: destinationBranch
        in: path
        description: destination branch name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/merge'
        required: false
      responses:
        200:
          description: merge completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merge_result'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: reference not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        409:
          description: conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merge_result'
        412:
          description: precondition failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: merge
  /repositories/{repository}/branches/{branch}/diff:
    get:
      tags:
      - branches
      summary: diff branch
      operationId: diffBranch
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: diff of branch uncommitted changes
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/diff'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/refs/{leftRef}/diff/{rightRef}:
    get:
      tags:
      - refs
      summary: diff references
      operationId: diffRefs
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: leftRef
        in: path
        description: a reference (could be either a branch or a commit ID)
        required: true
        schema:
          type: string
      - name: rightRef
        in: path
        description: a reference (could be either a branch or a commit ID) to compare
          against
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      - name: type
        in: query
        schema:
          type: string
      - name: diff_type
        in: query
        schema:
          type: string
          default: three_dot
          enum:
          - two_dot
          - three_dot
      responses:
        200:
          description: diff between refs
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/diff'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: reference not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/commits/{commitId}:
    get:
      tags:
      - commits
      summary: get commit
      operationId: getCommit
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: commitId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: commit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commit'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: commit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/refs/{ref}/objects:
    get:
      tags:
      - objects
      summary: get object content
      operationId: getObject
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: ref
        in: path
        description: a reference (could be either a branch or a commit ID)
        required: true
        schema:
          type: string
      - name: path
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: object content
          headers:
            ETag:
              schema:
                type: string
            Content-Disposition:
              schema:
                type: string
            Last-Modified:
              schema:
                type: string
            Content-Length:
              schema:
                type: integer
                format: int64
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        401:
          description: Unauthorized
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: resource not found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/error'
        410:
          description: object expired
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/branches/{branch}/objects:
    put:
      tags:
      - objects
      summary: stage an object's metadata for the given branch
      operationId: stageObject
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      - name: path
        in: query
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/object_stage_creation'
        required: false
      responses:
        201:
          description: object metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/object_stats'
        400:
          description: invalid object metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: repository or branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      x-codegen-request-body-name: object
    post:
      tags:
      - objects
      summary: upload object content
      operationId: uploadObject
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      - name: path
        in: query
        required: true
        schema:
          type: string
      - name: storageClass
        in: query
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                content:
                  type: string
                  description: Object content to upload
                  format: binary
      responses:
        201:
          description: object metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/object_stats'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: repository or branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
    delete:
      tags:
      - objects
      summary: delete object
      operationId: deleteObject
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      - name: path
        in: query
        required: true
        schema:
          type: string
      responses:
        204:
          description: object deleted successfully
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: path or branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/refs/{ref}/objects/stat:
    get:
      tags:
      - objects
      summary: get object metadata
      operationId: statObject
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: ref
        in: path
        description: a reference (could be either a branch or a commit ID)
        required: true
        schema:
          type: string
      - name: path
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: object metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/object_stats'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: path or branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        410:
          description: object gone (but partial metadata may be available)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/object_stats'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/refs/{ref}/objects/underlyingProperties/:
    get:
      tags:
      - objects
      summary: get object properties on underlying storage
      operationId: getUnderlyingProperties
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: ref
        in: path
        description: a reference (could be either a branch or a commit ID)
        required: true
        schema:
          type: string
      - name: path
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: object metadata on underlying storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/underlying_object_properties'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: path or branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/refs/{ref}/objects/ls:
    get:
      tags:
      - objects
      summary: list objects under a given prefix
      operationId: listObjects
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: ref
        in: path
        description: a reference (could be either a branch or a commit ID)
        required: true
        schema:
          type: string
      - name: prefix
        in: query
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      - name: delimiter
        in: query
        allowEmptyValue: true
        schema:
          type: string
          default: /
      responses:
        200:
          description: entry list
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/object_stats'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: prefix or branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/refs/{branch}/symlink:
    post:
      tags:
      - metadata
      summary: creates symlink files corresponding to the given directory
      operationId: createSymlink
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: branch
        in: path
        required: true
        schema:
          type: string
      - name: location
        in: query
        description: path to the table data
        schema:
          type: string
      responses:
        201:
          description: location created
          content:
            application/json:
              schema:
                type: string
                description: path to created location
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: repository or branch not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/actions/runs:
    get:
      tags:
      - actions
      summary: list runs
      operationId: listRuns
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      - name: branch
        in: query
        schema:
          type: string
      - name: commit
        in: query
        schema:
          type: string
      responses:
        200:
          description: list action runs
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/action_run'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/actions/runs/{run_id}:
    get:
      tags:
      - actions
      summary: get a run
      operationId: getRun
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: run_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: action run result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/action_run'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/actions/runs/{run_id}/hooks:
    get:
      tags:
      - actions
      summary: list run hooks
      operationId: listRunHooks
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: run_id
        in: path
        required: true
        schema:
          type: string
      - name: after
        in: query
        schema:
          type: string
      - name: amount
        in: query
        schema:
          type: integer
          default: 100
      responses:
        200:
          description: list specific run hooks
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: '#/components/schemas/pagination'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/hook_run'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/actions/runs/{run_id}/hooks/{hook_run_id}/output:
    get:
      tags:
      - actions
      summary: get run hook output
      operationId: getRunHookOutput
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: run_id
        in: path
        required: true
        schema:
          type: string
      - name: hook_run_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: run hook output
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        401:
          description: Unauthorized
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/error'
        404:
          description: output not found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/metadata/meta_range/{meta_range}:
    get:
      tags:
      - metadata
      summary: return URI to a meta-range file
      operationId: getMetaRange
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: meta_range
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: meta-range URI
          headers:
            Location:
              schema:
                type: string
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /repositories/{repository}/metadata/range/{range}:
    get:
      tags:
      - metadata
      summary: return URI to a range file
      operationId: getRange
      parameters:
      - name: repository
        in: path
        required: true
        schema:
          type: string
      - name: range
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: range URI
          headers:
            Location:
              schema:
                type: string
          content: {}
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        default:
          description: generic error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
  /healthcheck:
    get:
      tags:
      - healthCheck
      description: check that the API server is up and running
      operationId: healthCheck
      responses:
        204:
          description: NoContent
          content: {}
  /config:
    get:
      tags:
      - config
      description: retrieve the lakefs config
      operationId: getConfig
      responses:
        200:
          description: the lakefs config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/config'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  schemas:
    pagination:
      required:
      - has_more
      type: object
      properties:
        has_more:
          type: boolean
        next_offset:
          type: string
        results:
          minimum: 0
          type: integer
        max_per_page:
          minimum: 0
          type: integer
    repository:
      type: object
      properties:
        id:
          type: string
        creation_date:
          type: integer
          format: int64
        default_branch:
          type: string
          example: master
        storage_namespace:
          type: string
          description: Filesystem URI to store the underlying data in (e.g. 's3://my-bucket/some/path/')
    merge_result:
      type: object
      properties:
        summary:
          type: object
          properties:
            added:
              type: integer
            removed:
              type: integer
            changed:
              type: integer
            conflict:
              type: integer
        reference:
          type: string
    repository_creation:
      required:
      - name
      - storage_namespace
      type: object
      properties:
        name:
          pattern: ^[a-z0-9][a-z0-9-]{2,62}$
          type: string
        storage_namespace:
          pattern: ^(s3|gs|https?|mem|local|transient)://.*$
          type: string
          description: Filesystem URI to store the underlying data in (e.g. 's3://my-bucket/some/path/')
          example: s3://example-bucket/
        default_branch:
          type: string
          example: master
    object_stats:
      type: object
      properties:
        path:
          type: string
        physical_address:
          type: string
        checksum:
          type: string
        mtime:
          type: integer
          format: int64
        size_bytes:
          type: integer
          format: int64
          nullable: true
        path_type:
          type: string
          enum:
          - common_prefix
          - object
    object_stage_creation:
      required:
      - checksum
      - physical_address
      - size_bytes
      type: object
      properties:
        physical_address:
          type: string
        checksum:
          type: string
        size_bytes:
          type: integer
          format: int64
        metadata:
          type: object
          additionalProperties:
            type: string
    underlying_object_properties:
      type: object
      properties:
        storage_class:
          type: string
          nullable: true
    ref:
      required:
      - commit_id
      - id
      type: object
      properties:
        id:
          type: string
        commit_id:
          type: string
    diff:
      type: object
      properties:
        type:
          type: string
          enum:
          - added
          - removed
          - changed
          - conflict
        path:
          type: string
        path_type:
          type: string
          enum:
          - common_prefix
          - object
    reset_creation:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          enum:
          - object
          - common_prefix
          - commit
          - reset
        commit:
          type: string
        path:
          type: string
    commit:
      type: object
      properties:
        id:
          type: string
        parents:
          type: array
          items:
            type: string
        committer:
          type: string
        message:
          type: string
        creation_date:
          type: integer
          format: int64
        meta_range_id:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
    commit_creation:
      required:
      - message
      type: object
      properties:
        message:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
    merge:
      type: object
      properties:
        message:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
    branch_creation:
      required:
      - name
      - source
      type: object
      properties:
        name:
          type: string
        source:
          type: string
    tag_creation:
      required:
      - id
      - ref
      type: object
      properties:
        id:
          type: string
        ref:
          type: string
    refs_dump:
      type: object
      properties:
        commits_meta_range_id:
          type: string
        tags_meta_range_id:
          type: string
        branches_meta_range_id:
          type: string
    error:
      type: object
      properties:
        message:
          type: string
          description: short message explaining the error
    user:
      type: object
      properties:
        id:
          type: string
        creation_date:
          type: integer
          format: int64
    user_creation:
      required:
      - id
      type: object
      properties:
        id:
          type: string
    setup:
      required:
      - username
      type: object
      properties:
        username:
          type: string
          description: an identifier for the user (e.g. jane.doe)
        key:
          required:
          - access_key_id
          - secret_access_key
          type: object
          properties:
            access_key_id:
              minLength: 1
              type: string
              description: access key ID to set for user for use in integration testing.
              example: AKIAIOSFODNN7EXAMPLE
            secret_access_key:
              minLength: 1
              type: string
              description: secret access key to set for user for use in integration
                testing.
              example: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
          description: set to pass access_key_id, secret_access_key for testing.
    credentials:
      type: object
      properties:
        access_key_id:
          type: string
        creation_date:
          type: integer
          format: int64
    credentials_with_secret:
      type: object
      properties:
        access_key_id:
          type: string
        access_secret_key:
          type: string
        creation_date:
          type: integer
          format: int64
    group:
      type: object
      properties:
        id:
          type: string
        creation_date:
          type: integer
          format: int64
    group_creation:
      required:
      - id
      type: object
      properties:
        id:
          type: string
    statement:
      required:
      - action
      - effect
      - resource
      type: object
      properties:
        effect:
          type: string
          enum:
          - allow
          - deny
        resource:
          type: string
        action:
          minItems: 1
          type: array
          items:
            type: string
    policy:
      required:
      - id
      - statement
      type: object
      properties:
        id:
          type: string
        creation_date:
          type: integer
          format: int64
        statement:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/statement'
    config:
      type: object
      properties:
        blockstore_namespace_example:
          type: string
        blockstore_namespace_ValidityRegex:
          type: string
    action_run:
      required:
      - branch
      - commit_id
      - run_id
      type: object
      properties:
        run_id:
          type: string
        branch:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        event_type:
          type: string
          enum:
          - pre_commit
          - pre_merge
        status:
          type: string
          enum:
          - failed
          - completed
        commit_id:
          type: string
    hook_run:
      required:
      - hook_run_id
      type: object
      properties:
        hook_run_id:
          type: string
        action:
          type: string
        hook_id:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        status:
          type: string
          enum:
          - failed
          - completed
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
    jwt_token:
      type: apiKey
      name: X-JWT-Authorization
      in: header
